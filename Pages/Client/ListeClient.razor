@using System.Net.Http.Json
@using Contrat_AC.Controller.Client;
@using Contrat_AC.Models.Client
@inject IDialogService Dialog
@inject ISnackbar Snackbar
@inject IClientService clientService

<style>
    .selected {
        background-color: #1E88E5 !important;
    }

        .selected > td {
            color: white !important;
        }

            .selected > td .mud-input {
                color: white !important;
            }

    .my-custom-class {
        backdrop-filter: blur(10px);
    }

    .large {
        width: 1px
    }
</style>

@*<MudPaper >*@
<MudPaper>
    <MudButtonGroup Color="Color.Primary" Variant="Variant.Outlined" OverrideStyles="false" Size="Size.Small">
        <MudButton Color="Color.Success" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Add" OnClick="AddClient">Ajouter</MudButton>
        <MudButton Color="Color.Warning" Variant="Variant.Outlined" StartIcon="@Icons.Material.Outlined.Edit" OnClick="EditClient">Modifier </MudButton>
        <MudButton Color="Color.Secondary" Variant="Variant.Outlined" StartIcon="@Icons.Material.Filled.DeleteForever" OnClick="DeleteClient">Supprimer</MudButton>
    </MudButtonGroup>
</MudPaper>

<MudTable Items="@clients" Dense="true" Hover="true" T="Client" FixedHeader="true" FixedFooter="true" HorizontalScrollbar="true" Height="400px"
          Filter="new Func<Client,bool>(FilterFunc1)" @bind-SelectedItem="selectedItem1" Breakpoint="Breakpoint.Sm" Bordered=true
          RowClassFunc="SelectedRowClassFunc" OnRowClick="RowClickEvent" @ref="tableClient">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste des utilisateurs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchString1" Placeholder="Recherche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nom</MudTh>
        <MudTh>Prénom</MudTh>
        <MudTh>Fonction</MudTh>
        <MudTh>Type d'identité</MudTh>
        <MudTh Class="large">N° d'identité</MudTh>
        <MudTh>Date de naissance</MudTh>
        <MudTh>Lieu de naissance</MudTh>
        <MudTh>Délivre le</MudTh>
        <MudTh>Délivre à</MudTh>
        <MudTh>Adresse</MudTh>
        <MudTh>Ville</MudTh>
        <MudTh>Téléphone</MudTh>
        <MudTh>Email</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.Clientid</MudTd>
        <MudTd DataLabel="Nom">@context.Nom</MudTd>
        <MudTd DataLabel="Prénom">@context.Prenom</MudTd>
        <MudTd DataLabel="Fonction">@context.Fonction</MudTd>
        <MudTd DataLabel="Type d'identité">@context.TypeIdentite</MudTd>
        <MudTd DataLabel="N° d'identité">
            <div style="display:block; width: 115px">
                @context.NumeroPiece
            </div>
        </MudTd>
        <MudTd DataLabel="Date de naissance">
            <div style="display:block; width: 130px">
                @context.DateNaissance.Value.ToString("dd MMMM yyyy")
            </div>
        </MudTd>
        <MudTd DataLabel="Lieu de naissance">@context.LieuNaissance</MudTd>
        <MudTd DataLabel="Délivre le">
            <div style="display:block; width: 115px">
                @context.DelivreLe.Value.ToString("dd MMMM yyyy")
            </div>
        </MudTd>
        <MudTd DataLabel="Délivre à">@context.DelivreA</MudTd>
        <MudTd DataLabel="Adresse">@context.Adresse</MudTd>
        <MudTd DataLabel="Ville">@context.Ville</MudTd>
        <MudTd DataLabel="Téléphone">@context.Telephone</MudTd>
        <MudTd DataLabel="Email">@context.Email</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@*</MudPaper>*@

@code {
    private string searchString1 = null!;
    private Client selectedItem1 = null!;
    MudTable<Client>? tableClient;
    private HashSet<Client> selectedItems = new HashSet<Client>();
    DialogOptions maxWidth = new DialogOptions() { MaxWidth = MaxWidth.Medium, FullWidth = true, CloseButton = true, DisableBackdropClick = true };

    private IEnumerable<Client> clients = new List<Client>();
    private int selectedRowNumber = -1;
    private List<string> clickedEvents = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadTableClient();
    }

    private bool FilterFunc1(Client element) => FilterFunc(element, searchString1);

    private bool FilterFunc(Client element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        if (element.Clientid.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Nom.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Prenom.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Fonction.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.TypeIdentite.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.NumeroPiece.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DateNaissance.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LieuNaissance.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DelivreA.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.DelivreLe.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Adresse.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Ville.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Telephone.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Email.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task LoadTableClient()
    {
        clients = await clientService.GetAllClient();
        StateHasChanged();
    }

    private void RowClickEvent(TableRowClickEventArgs<Client> tableRowClickEventArgs)
    {
        clickedEvents.Add("Row clicked");
    }

    private string SelectedRowClassFunc(Client _client, int rowNumber)
    {
        if (selectedRowNumber == rowNumber)
        {
            selectedRowNumber = -1;
            return string.Empty;
        }
        else if (tableClient.SelectedItem != null && tableClient.SelectedItem.Equals(_client))
        {
            selectedRowNumber = rowNumber;
            return "selected";
        }
        else
        {
            return string.Empty;
        }
    }

    private async void AddClient()
    {
        var dialogUser = Dialog.Show<DialogAjoutClient>("Ajout d'un nouveau client", maxWidth);
        var resultDialogUser = await dialogUser.Result;
        if (!resultDialogUser.Canceled)
        {
            if ((bool)resultDialogUser.Data)
            {
                Snackbar.Add("Enregistrement réussi.", Severity.Success);
                await LoadTableClient();
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Erreur d'enregistrement.", Severity.Error);
                await LoadTableClient();
                StateHasChanged();
            }
        }
    }

    private async void EditClient()
    {

    }

    private async void DeleteClient()
    {

    }
}

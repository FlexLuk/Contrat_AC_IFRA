@page "/authentification"
@using System.ComponentModel.DataAnnotations;
@using Contrat_AC.AuthetificationState.Data
@using Contrat_AC.Data.AuthetificationState
@using Contrat_AC.Models.Autorisation
@layout Contrat_AC.Shared.Autorisation.AuthentificationLayout
@inject ISnackbar Snackbar
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager
@inject ILoginControl LogCtrl

<EditForm OnValidSubmit="OnValidSubmit" Model="@user">
    <MudGrid Justify="Justify.Center" Class="mt-n12">

        <MudCard Style="width: 400px">
            <MudGrid Justify="Justify.Center">
                <h2><b>GESION DE CONTRAT AC IFRA</b></h2>
            </MudGrid>
            <MudGrid Justify="Justify.Center">
                <MudPaper Elevation="0" Class="mb-4 mt-4">
                    <MudImage Src="images/ifra-icone.png" Alt="IFRA logo" Height="80" />
                </MudPaper>
            </MudGrid>

            <MudDivider />
            <MudCardContent>
                <MudGrid Justify="Justify.Center" Class="mb-2">
                    <h3>Authentification</h3>
                </MudGrid>
                <DataAnnotationsValidator />
                <MudTextField @bind-Value="user.AdressMail" Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" For="(()=>user.AdressMail)"></MudTextField>
                <MudTextField @bind-Value="user.Password" Label="Mot de passe" Variant="Variant.Outlined" Margin="Margin.Dense" class="mt-4" InputType="InputType.Password" For="(()=>user.Password)"></MudTextField>
                <MudGrid Justify="Justify.FlexEnd" Class="mt-1 pr-3 mb-1">
                    <MudItem>
                        @*<ValidationSummary  />*@
                    </MudItem>
                    <MudItem>
                        <MudLink Href="#" Underline="Underline.Always">Mot de passe oublié</MudLink>
                    </MudItem>

                </MudGrid>

            </MudCardContent>
            <MudDivider />
            <MudCardActions>
                <MudGrid Justify="Justify.FlexEnd" Class="mt-2 mb-2 mr-1">
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="demo-form-button">Se connecter</MudButton>
                </MudGrid>
            </MudCardActions>
        </MudCard>

    </MudGrid>
</EditForm>

@code {
    User user = new();
    public bool resteConnecterCheckBox { get; set; } = true;

    protected override async void OnInitialized()
    {
        var EmailAdress = await localStorage.GetItemAsync<string>("emailAddress");
        if (EmailAdress != null)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            //editContext = new EditContext(utilisateur);
        }
    }

    private async Task OnValidSubmit(EditContext context)
    {
        User? utilisateur = new();
        if (user.Password != null)
            utilisateur = await LogCtrl.VerificationUtilisateur(user.AdressMail, user.Password);

        if (utilisateur != null)
        {
            List<Role> uroles = await LogCtrl.GetRoleUserAuthentified(utilisateur);
            List<string> roles = new();
            foreach (var item in uroles)
            {
                if (item.RoleName != null)
                    roles.Add(item.RoleName.Trim());
            }
            await localStorage.SetItemAsync("emailAddress", utilisateur.AdressMail);
            await localStorage.SetItemAsync("loginNom", utilisateur.FirstName);
            await localStorage.SetItemAsync("loginPrenom", utilisateur.LastName);
            await localStorage.SetItemAsync("roles", roles);
            ((CustomAuthenticationStateProvider)AuthenticationStateProvider).MarkUserAsAuthenticated(utilisateur, roles);

            NavigationManager.NavigateTo("/");
        }
        else
        {
            Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
            Snackbar.Add("Email ou mot de passe incorrect.", Severity.Error);
        }
    }

}
@using Contrat_AC.Controller.Autorisation
@using Contrat_AC.Models.Autorisation
@inject IAutorisationService autorisationService
@inject ISnackbar Snackbar

<MudTable Items="@users" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="_quickFilter" >
    <ToolBarContent>
        <MudText Typo="Typo.h6">Liste des utilisateurs</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Recherche" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>ID</MudTh>
        <MudTh>Nom</MudTh>
        <MudTh>Prenom</MudTh>
        <MudTh>Email</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="ID">@context.UserId</MudTd>
        <MudTd DataLabel="Nom">@context.FirstName</MudTd>
        <MudTd DataLabel="Prenom">@context.LastName</MudTd>
        <MudTd DataLabel="Email">@context.AdressMail</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>
</MudTable>
@if(users != null){
    foreach(var item in users){
        <span>@item.FirstName</span>
    }
}
@code {
    User user = new();

    private List<User> users = new List<User>();
    private string _searchString = "HER";
    private List<string> _events = new();

    // quick filter - filter gobally across multiple columns with the same input
    private Func<User, bool> _quickFilter => x =>
    {
        if (string.IsNullOrWhiteSpace(_searchString))
            return false;

        if (x.FirstName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.AdressMail.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        if (x.LastName.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    };

    protected override async Task OnInitializedAsync()
    {
        users = await autorisationService.GetAllUsersAsync();
        StateHasChanged();
    }

    // events
    void RowClicked(DataGridRowClickEventArgs<User> args)
    {
        Snackbar.Add("Row clicked.");
    }

    void SelectedItemsChanged(HashSet<User> items)
    {
        Snackbar.Add("Selected item changed.");
    }
}
